unit estacionamientoTAD;

interface

const
  tarifaHora = 50;
  mediaEstadia = 350;
  estadiaCompleta = 800;
  min = 1;
  max = 50;

type
  Auto = Record
    patente: string;
    //horarioEntrada: integer;
    //horarioSalida: integer;
    horarioEntrada: String;
    horarioSalida: String;
    estacionado: boolean;
  End;


type
  Estacionamiento = Object
    private
      Autos: Array[min..max] of Auto;
    public
      function conseguirLugar() : integer;
      function guardarAuto(patente, entrada, salida: string) : boolean;
//      function calcularPago() : String;
      procedure cargarEstacionamiento();      
End;

implementation


procedure Estacionamiento.cargarEstacionamiento();
var I: integer;
begin 
  for I := min to max do begin
    Autos[I].estacionado := False;
  end;
end;

function Estacionamiento.conseguirLugar() : integer;
var I: integer;
begin
  Result := -1;
  for I := min to max do begin
    if Autos[I].estacionado = False then Result := I;
  end;
end;

function Estacionamiento.guardarAuto(patente, entrada, salida: string; lugar: integer) : boolean;
var lugar: integer;
begin
  Result := True;
  lugar := conseguirLugar();
  if lugar <> -1 then begin
    Autos[lugar].patente := patente;
    Autos[lugar].horarioEntrada := entrada;
    Autos[lugar].horarioSalida := salida;
  end
  else begin 
    Result := False;
  end;
  
end;

//function Estacionamiento.calcularPago() : String;
//var horas: integer;
//begin
//  if (Auto.horarioSalida - Auto.horarioEntrada) > 600 then begin
//    Result := estadiaCompleta;
//  end
//  else if ((Auto.horarioSalida - Auto.horarioEntrada) > 300)  and ((Auto.horarioSalida - Auto.horarioEntrada) < 600) then begin
//    Result := mediaEstadia;
//  end
//  else begin
//    horas := (Auto.horarioSalida - Auto.horarioEntrada);
//
//  end;
//
//
//end;

end.
